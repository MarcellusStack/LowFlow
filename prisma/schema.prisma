// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  users       User[]
  workflows   Workflow[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Workflow {
  id             String        @id @default(uuid())
  name           String
  description    String?
  status         String
  processes      Process[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  workflowRuns   WorkflowRun[]
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?
}

model Process {
  id             String       @id @default(uuid())
  workflowId     String
  name           String
  description    String?
  n8nWorkflowIds String[]
  fields         Json
  workflow       Workflow     @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  ProcessRun     ProcessRun[]
}

model WorkflowRun {
  id          String       @id @default(uuid())
  workflowId  String
  workflow    Workflow     @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  processRuns ProcessRun[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProcessRun {
  id            String      @id @default(uuid())
  workflowRunId String
  processId     String
  submission    Submission?
  workflowRun   WorkflowRun @relation(fields: [workflowRunId], references: [id], onDelete: Cascade)
  process       Process     @relation(fields: [processId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([workflowRunId, processId])
}

model Submission {
  id           String     @id @default(uuid())
  processRunId String
  data         Json
  processRun   ProcessRun @relation(fields: [processRunId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([processRunId])
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
