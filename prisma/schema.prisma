// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String?
  users        User[]
  workflows    Workflow[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  processes    Process[]
  workflowRuns WorkflowRun[]
  processRuns  ProcessRun[]
  submissions  Submission[]
  n8nWorkflows N8nWorkflow[]
  permissions  Permission[]
}

model Permission {
  id             String       @id @default(uuid())
  name           String       @unique
  description    String?
  workflows      Workflow[]
  processes      Process[]
  users          User[]
  createWorkflow Boolean      @default(false)
  readWorkflow   Boolean      @default(false)
  updateWorkflow Boolean      @default(false)
  deleteWorkflow Boolean      @default(false)
  createProcess  Boolean      @default(false)
  readProcess    Boolean      @default(false)
  updateProcess  Boolean      @default(false)
  deleteProcess  Boolean      @default(false)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([name, organizationId])
  @@index([id, organizationId])
  @@index(organizationId)
}

model N8nWorkflow {
  id                String       @id @default(uuid())
  name              String       @unique
  description       String?
  workflowId        String       @unique
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId    String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  completeProcesses Process[]    @relation("CompleteProcessWorkflows")
  ongoingProcesses  Process[]    @relation("OngoingProcessWorkflows")
  completeWorkflows Workflow[]   @relation("CompleteWorkflows")
  ongoingWorkflows  Workflow[]   @relation("OngoingWorkflows")
  archiveWorkflows  Workflow[]   @relation("ArchiveWorkflows")

  @@unique([organizationId, workflowId])
}

model Workflow {
  id                   String             @id @default(uuid())
  name                 String
  description          String?
  approval             Boolean            @default(false)
  status               PresentationStatus @default(public)
  processes            Process[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  workflowRuns         WorkflowRun[]
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId       String
  permissions          Permission[]
  n8nCompleteWorkflows N8nWorkflow[]      @relation("CompleteWorkflows")
  n8nOngoingWorkflows  N8nWorkflow[]      @relation("OngoingWorkflows")
  n8nArchiveWorkflows  N8nWorkflow[]      @relation("ArchiveWorkflows")
}

model Process {
  id                   String             @id @default(uuid())
  workflowId           String
  name                 String
  description          String?
  status               PresentationStatus @default(public)
  fields               Json?
  order                Int
  workflow             Workflow           @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  processRuns          ProcessRun[]
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId       String
  n8nCompleteWorkflows N8nWorkflow[]      @relation("CompleteProcessWorkflows")
  n8nOngoingWorkflows  N8nWorkflow[]      @relation("OngoingProcessWorkflows")
  permission           Permission?        @relation(fields: [permissionId], references: [id])
  permissionId         String?
}

model WorkflowRun {
  id             String        @id @default(uuid())
  workflowId     String
  workflow       Workflow      @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  processRuns    ProcessRun[]
  status         ProcessStatus @default(open)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model ProcessRun {
  id             String        @id @default(uuid())
  workflowRunId  String
  processId      String
  submission     Submission?
  workflowRun    WorkflowRun   @relation(fields: [workflowRunId], references: [id], onDelete: Cascade)
  process        Process       @relation(fields: [processId], references: [id], onDelete: Cascade)
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  status         ProcessStatus @default(open)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([workflowRunId, processId])
}

model Submission {
  id             String       @id @default(uuid())
  processRunId   String
  data           Json?
  processRun     ProcessRun   @relation(fields: [processRunId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([processRunId])
}

enum PresentationStatus {
  public
  draft
  archived
}

enum ProcessStatus {
  open
  ongoing
  completed
  archived
  incomplete
}

model User {
  id             String        @id @default(cuid())
  firstName      String?
  lastName       String?
  name           String?
  email          String        @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  permissions    Permission[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
